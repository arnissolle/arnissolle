#!/usr/bin/env php
<?php

declare(strict_types=1);

(new class {

    public function __invoke(string $rootDir): void
    {
        $assetsDir = "{$rootDir}/assets";
        $ahoyWorldFilePath = "{$assetsDir}/ahoy-world.php";
        
        $ahoyWorldFileContent = file_get_contents($ahoyWorldFilePath);
        $this->replace(pattern: '/return new class/', replacement: 'echo new class', subject: $ahoyWorldFileContent);
        
        $ahoyWorld = require $ahoyWorldFilePath;
        $this->setQueryString(class: $ahoyWorld, property: 'website', queries: [
            'utm_source' => 'github',
            'utm_medium' => 'social',
        ]);
        
        $ahoyWorldOutput = (string) $ahoyWorld;
        $this->replace(pattern: '/^/m', replacement: '> ', subject: $ahoyWorldOutput);
        
        $readmeFileContent = file_get_contents("{$assetsDir}/README.stub.md");
        $this->replace(pattern: '/<php-version>/', replacement: PHP_VERSION, subject: $readmeFileContent);
        $this->replace(pattern: '/<anonymous-class>/', replacement: $ahoyWorldFileContent, subject: $readmeFileContent);
        $this->replace(pattern: '/<anonymous-class-output>/', replacement: $ahoyWorldOutput, subject: $readmeFileContent);

        file_put_contents("{$rootDir}/README.md", $readmeFileContent);
    }

    private function setQueryString(object $class, string $property, array $queries): void
    {
        $reflectionClass = new ReflectionClass($class);
        $reflectionProperty = $reflectionClass->getProperty($property);
        $reflectionProperty->setAccessible(true);
        $reflectionProperty->setValue($class, $reflectionProperty->getValue($class) . '?' . http_build_query($queries));
    }

    private function replace(string $pattern, string $replacement, string &$subject): void
    {
        $subject = preg_replace($pattern, $replacement, $subject);
    }

})(rootDir: __DIR__ . '/..');